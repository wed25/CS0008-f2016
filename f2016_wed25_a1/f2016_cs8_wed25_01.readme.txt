After reading the description,
I divided the whole program into three big steps: input, process, output.
Inside each steps I also separate into small steps.

1. Input
1.1
The first input goal is to ask for the user about the system he/she want to use.
I first assign 'USC' as a string to the variable 'a',
and also assign 'Metric' as a string to the variable 'b' .
Then I use the input function to ask user 'which system he or she use either a or b',
and assign this answer to the variable 'original_unit'.

1.2
The second input goal is to ask for two basic quantities I need to use.
I use the input function to ask user to enter the amount of distance driven and the amount of gasoline was used.
Then I assign these two quantities to two new variables separately,
which called 'distance_quantity_original' and 'gasoline_quantity_original'.

2. Process
I use the if-else statement to
convert the quantity provided by the user in the other units system,
calculate the fuel consumption in both units,
and get the rating information

2.1
If the original unit is USC

2.1.1
I assign new names to the variable in step1.2
'distance_quantity_USC = distance_quantity_original'
'gasoline_quantity_USC = gasoline_quantity_original'

2.1.2
I converted the quantities in USC unit into quantities in Metric unit.
Therefore, we need to set two new variables to be 'distance_quantity_convert_Metric' 'gasoline_quantity_convert_Metric'
with the given mathematical conversion equations:
'distance_quantity_Metric = 1.60934 * distance_quantity_USC'
'gasoline_quantity_Metric = 3.78541 * gasoline_quantity_USC'

2.1.3
Then use 'distance_quantity_original' and 'gasoline_quantity_original' variables
to calculate the 'consumption_quantity_USC' by the given formula.
'consumption_quantity_USC = distance_quantity_USC / gasoline_quantity_USC'

And use  'distance_quantity_convert' and 'gasoline_quantity_convert' variables
to calculate the 'consumption_quantity_Metric' by the given formula
'consumption_quantity_Metric = 100 * gasoline_quantity_Metric / distance_quantity_Metric'

2.2
If the condition is not true, this means that the original system user choose is Metric.
So it goes to else statement.

2.2.1
Since I know the original quantities of distance and gasoline is in Metric unit,
I assign new names to the variables in step1.2
distance_quantity_Metric = distance_quantity_original
gasoline_quantity_Metric = gasoline_quantity_original

2.2.2
I need to convert the quantities in Metric unit into quantities in USC unit by the given unit conversion equation.
The mathematical conversion equations will be
distance_quantity_USC = 0.621371 * distance_quantity_Metric
gasoline_quantity_USC = 0.264172 * gasoline_quantity_Metric

2.2.3
Then I use 'distance_quantity_USC' and 'gasoline_quantity_USC' variables
to calculate 'consumption_quantity_USC' by the given formula.
'consumption_quantity_USC = distance_quantity_USC / gasoline_quantity_USC'

And use 'distance_quantity_Metric' and 'gasoline_quantity_Metric' variables
to calculate 'consumption_quantity_Metric' by the given formula
'consumption_quantity_Metric = 100 * gasoline_quantity_Metric / distance_quantity_Metric'

2.3
I use the if statement to get the rating categories
if consumption_quantity_Metric > 20:
   Rating = input('extremely poor')
elif consumption_quantity_Metric > 15 and consumption_quantity_Metric <= 20:
   Rating = input('poor')
elif consumption_quantity_Metric > 10 and consumption_quantity_Metric <= 15:
   Rating = input('average')
elif consumption_quantity_Metric > 8 and consumption_quantity_Metric <= 10:
    Rating = input('Good')
else
    Rating = input('Excellent')

3. Output
3.1
I format allvariables with quantities  as floats with 3 decimals

3.2
Use print funtion to print all the variables in final format
